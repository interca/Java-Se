 while (true) {
            ch = lin.charAt(index);
            if (operstack.isoper(ch) == true) {//判断是不是符号
                if (operstack.isempty()) {//判断符号堆栈是不是空，如果是压入
                    if (ch == '-')
                        operstack.push('+');
                    else operstack.push(ch);
                } else {//如果不为空，当前符号小于等于堆栈中符号的优先级，从符号堆栈中Pop出做运算，否则，直接Push
                    if (operstack.priority(ch) <= operstack.priority(operstack.top())) {
                        num1 = numberstack.pop();
                        num2 = numberstack.pop();
                        oper = operstack.pop();
                        res = numberstack.count(num1, num2, oper);
                        //把运算结果放到数堆栈
                        numberstack.push(res);
                        //再把符号放入数堆栈
                        if (ch == '-')
                            operstack.push('+');
                        else operstack.push(ch);
                    } else {//当前运算符大于堆栈内运算符
                        operstack.push(ch);//压入符号堆栈
                    }
                }
            } else {//不是符号,考虑多维数字的情况。如果数后面还有数，那要考虑叠加了
                //因此定义字符串变量进行拼接
                link = link + ch;
                if (index==lin.length()-1) {//已经是最后一个，直接压入
                    if (index - count > 1 && lin.charAt(index - count) == '-') {//判断这个数前一个符号是不是负
                        numberstack.push(-Integer.parseInt(link));
                        link = "";
                        count = 0;
                    } else {
                        numberstack.push(Integer.parseInt(link));
                        link="";
                        count = 0;
                    }
                    break;
                } else {//判断后一位是不是字符，如果是，就拼接,否则入堆栈
                    if (operstack.isoper(lin.charAt(index + 1)) == true) {
                        if (index - count > 1 && lin.charAt(index - count) == '-') {//判断这个数前一个符号是不是负
                            numberstack.push(-Integer.parseInt(link));
                            link = "";
                            count = 1;
                        } else {
                            numberstack.push(Integer.parseInt(link));
                            count = 1;
                            link="";
                        }
                    } else {
                        count++;
                    }
                }
            }
               if (index == lin.length() - 1) break;
               index++;
          }

           //扫描结束后，顺序从两个堆栈中Pop出对应的数字和符号进行运算
                      while (true) {
                          //符号堆栈为空的时候，数堆栈中结果就是最后4的结果
                          if (operstack.isempty() == true) break;
                          num1 = numberstack.pop();
                          num2 = numberstack.pop();
                          oper = operstack.pop();
                          res = numberstack.count(num1, num2, oper);
                          numberstack.push(res);
                      }
                      System.out.println(numberstack.top());